#include "documentsgenerator.h"

#include <QDir>
#include <QMap>
#include <QFile>
#include <QDebug>

DocumentsGenerator::DocumentsGenerator(const QString &dest) :
    m_dst(dest)
{
}

void DocumentsGenerator::extract(const QString &data)
{
    QDir().mkpath(m_dst);
    extractTypes(data);
    extractMethods(data);

    QString result = "# LibqTelegram Documents:\n\n";
    result += "## [Available Types](types/index.md)\n\n";
    result += "## [Available Methods](functions/index.md)\n\n";
    result += "**Note:** This documents generated by [libqtelegram code generator](https://github.com/Aseman-Land/libqtelegram-code-generator). "
              "So please dont change them by hand.";

    QFile file(m_dst + "/index.md");
    if(!file.open(QFile::WriteOnly))
        return;

    file.write(result.toUtf8());
    file.close();
}

void DocumentsGenerator::extractTypes(const QString &data)
{
    const QString tdst = m_dst + "/types/";
    QString result = "# Available Types:\n\n";

    QMap<QString, QList<GeneratorTypes::TypeStruct> > types = AbstractGenerator::extractTypes(data, QString(), "telegram/types/", "types");
    QMapIterator<QString, QList<GeneratorTypes::TypeStruct> > i(types);
    while(i.hasNext())
    {
        i.next();
        const QString &name = i.key();
        const QList<GeneratorTypes::TypeStruct> &types = i.value();
        writeType(name, types);

        result += QString("* [%1](%2.md)\n\n")
                  .arg(classCaseType(name))
                  .arg(classCaseType(name).toLower());
    }

    QFile file(tdst + "/index.md");
    if(!file.open(QFile::WriteOnly))
        return;

    file.write(result.toUtf8());
    file.close();
}

void DocumentsGenerator::extractMethods(const QString &data)
{
    const QString mdst = m_dst + "/functions/";
    QString result = "# Available Methods:\n\n";

    QMap<QString, QList<GeneratorTypes::FunctionStruct> > functions = extractFunctions(data);
    QMapIterator<QString, QList<GeneratorTypes::FunctionStruct> > i(functions);
    while(i.hasNext())
    {
        i.next();
        const QString &name = i.key();
        const QList<GeneratorTypes::FunctionStruct> &types = i.value();
        writeType(name, types);

        result += QString("* [%1](%2.md)\n\n")
                  .arg(classCaseType(name))
                  .arg(classCaseType(name).toLower());
    }

    QFile file(mdst + "/index.md");
    if(!file.open(QFile::WriteOnly))
        return;

    file.write(result.toUtf8());
    file.close();
}

void DocumentsGenerator::writeType(const QString &name, const QList<GeneratorTypes::FunctionStruct> &functions)
{
    const QString fdst = m_dst + "/functions/";
    const QString mfdst = fdst + "/methods/";
    QDir().mkpath(fdst);
    QDir().mkpath(mfdst);

    const QString &clssName = classCaseType(name);

    QString result;
    result += QString("# %1\n\n## Methods:\n\n").arg(clssName);

    QMap<QString, QMap<QString,GeneratorTypes::ArgStruct> > properties;
    for(int i=0; i<functions.count(); i++)
    {
        const GeneratorTypes::FunctionStruct &f = functions[i];
        const GeneratorTypes::TypeStruct &t = f.type;

        QString lqtgFunctionName = unclassCaseType(name) + classCaseType(f.functionName);
        const QString inputType = f.returnType.constRefrence? "const " + f.returnType.html + " &" : f.returnType.html + " ";

        result += QString("* **%1** - [TelegramCore::%3](methods/%2.md)\n\n")
                .arg(undoCase(f.functionName))
                .arg(f.functionName.toLower())
                .arg( unclassCaseType(name) + classCaseType(f.functionName) );

        QString methodResult;

        methodResult += "# " + name + "." + f.functionName + "\n\n";
        methodResult += QString("## Function:\n\nTelegramCore::%1\n\n").arg(lqtgFunctionName);
        methodResult += QString("## Schema:\n\n```c++\n%1\n```\n").arg(f.code);
        methodResult += QString("## Parameters:\n\n");
        methodResult += "|Name|Type|Default|\n"
                        "|----|----|-------|\n";

        QString arguments;
        for(int j=0; j<t.args.length(); j++)
        {
            const GeneratorTypes::ArgStruct &arg = t.args[j];

            properties[f.functionName][arg.type.name] = arg;
            if(arg.isFlag)
                continue;

            methodResult += QString("|%1|%2||\n")
                    .arg(cammelCaseType(arg.argName))
                    .arg(typeToHtml(arg.type, "../../types/"));

            arguments += QString("%1").arg(arg.argName);
            arguments += ", ";
        }

        methodResult += QString("|callBack|Callback&lt;%1&gt;|0|\n").arg(typeToHtml(f.returnType, "../../types/"));
        methodResult += "|timeout|qint32|TelegramCore::timeOut()|\n\n";

        methodResult += "## Callback Result:\n\n";
        methodResult += "|Name|Type|\n"
                        "|----|----|\n"
                        "|msgId|qint64|\n" +
                        QString("|result|%1|\n")
                        .arg(typeToHtml(f.returnType, "../../types/")) +
                        "|error|TelegramCore::CallbackError|\n\n";

        methodResult += "## Signals:\n\n";
        methodResult += QString("```c++\n%1Answer(qint64 msgId, %2 result)\n```\n"
                                "```c++\n%1Error(qint64 msgId, qint32 errorCode, const QString &errorText)\n```\n\n")
                        .arg(f.functionName,inputType);

        methodResult += "## Events:\n\n";
        methodResult += QString("```c++\non%1Answer(qint64 msgId, %2 result)\n```\n"
                                "```c++\non%1Error(qint64 msgId, qint32 errorCode, const QString &errorText)\n```\n\n")
                        .arg(classCaseType(f.functionName),inputType);

        methodResult += "## Macros:\n\n" +
                        QString("* TG_%1_CALLBACK\n\n")
                        .arg(usCaseType(f.functionName).toUpper());

        methodResult += QString("## Examples:\n\n"
                        "```c++\ntg->%1(%2[=](TG_%3_CALLBACK){\n    ...\n}, 30000);\n```\n")
                        .arg(f.functionName).arg(arguments)
                        .arg(usCaseType(f.functionName).toUpper());

        QFile methodFile(mfdst + "/" + f.functionName.toLower() + ".md");
        methodFile.open(QFile::WriteOnly);
        methodFile.write(methodResult.toUtf8());
        methodFile.close();
    }


    QFile file(fdst + "/" + clssName.toLower() + ".md");
    if(!file.open(QFile::WriteOnly))
        return;

    file.write(result.toUtf8());
    file.close();
}

void DocumentsGenerator::writeType(const QString &name, const QList<GeneratorTypes::TypeStruct> &types)
{
    const QString tdst = m_dst + "/types/";
    QDir().mkpath(tdst);

    const QString &clssName = classCaseType(name);

    QString result;
    result += QString("# %1\n\n").arg(clssName);
    result += "## Types\n\n";

    QString typesResult;
    QMap<QString, QMap<QString,GeneratorTypes::ArgStruct> > properties;
    for(int i=0; i<types.count(); i++)
    {
        const GeneratorTypes::TypeStruct &t = types[i];

        result += QString("* [%1](#%2%3)\n")
                  .arg(t.typeName)
                  .arg(clssName.toLower())
                  .arg(t.typeName.toLower());

        typesResult += QString("## %1::%2\n\n").arg(clssName).arg(t.typeName);
        typesResult += QString("#### Schema:\n\n```c++\n%1\n```\n\n").arg(t.code);
        typesResult += "#### Parameters:\n\n";

        if(!t.args.isEmpty())
            typesResult += "|Name|Type|\n"
                           "|----|----|\n";

        for(int j=0; j<t.args.length(); j++)
        {
            const GeneratorTypes::ArgStruct &arg = t.args.at(j);
            if(arg.isFlag)
                continue;

            typesResult += QString("|%1|%2|\n")
                           .arg(cammelCaseType(arg.argName))
                           .arg(typeToHtml(arg.type));
        }

        typesResult += "\n";
    }

    result += "\n" + typesResult;

    QFile file(tdst + "/" + clssName.toLower() + ".md");
    if(!file.open(QFile::WriteOnly))
        return;

    file.write(result.toUtf8());
    file.close();
}

QString DocumentsGenerator::typeToHtml(const GeneratorTypes::QtTypeStruct &t, const QString &prePath)
{
    GeneratorTypes::QtTypeStruct type = t.innerType? *(t.innerType) : t;
    QString typeString;
    if(type.qtgType)
        typeString = QString("[%1](%2%3.md)").arg(type.html).arg(prePath).arg(type.html.toLower());
    else
        typeString = type.html;
    if(t.innerType)
        typeString = "QList&lt;" + typeString + "&gt;";
    return typeString;
}

DocumentsGenerator::~DocumentsGenerator()
{
}
