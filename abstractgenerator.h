#ifndef ABSTRACTGENERATOR_H
#define ABSTRACTGENERATOR_H

#include <QStringList>
#include <QRegExp>
#include <QMap>
#include <QSet>

#define GENERATOR_SIGNATURE(COMMENT_SIGN) \
    COMMENT_SIGN " This file generated by libqtelegram-code-generator.\n" \
    COMMENT_SIGN " You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator\n" \
    COMMENT_SIGN " DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN\n\n"

namespace GeneratorTypes
{
    class QtTypeStruct
    {
    public:
        QtTypeStruct(): constRefrence(false), qtgType(false){}
        QString name;
        QStringList includes;
        bool constRefrence;
        bool qtgType;
        QString defaultValue;
        QString originalType;

        bool operator ==(const QtTypeStruct &b) {
            return name == b.name &&
                   includes == b.includes &&
                   constRefrence == b.constRefrence &&
                   defaultValue == b.defaultValue &&
                   originalType == b.originalType;
        }
    };

    class ArgStruct
    {
    public:
        ArgStruct() : flagValue(0) {}
        QString flagName;
        int flagValue;
        GeneratorTypes::QtTypeStruct type;
        QString argName;

        bool operator ==(const ArgStruct &b) {
            return flagName == b.flagName &&
                   type == b.type &&
                   flagValue == b.flagValue &&
                   argName == b.argName;
        }
    };

    class TypeStruct
    {
    public:
        QString typeName;
        QString typeCode;
        QList<ArgStruct> args;
    };

    class FunctionStruct
    {
    public:
        TypeStruct type;
        QString functionName;
        QString className;
        QtTypeStruct returnType;
    };
}

class AbstractGenerator
{
protected:
    QString shiftSpace(const QString &str, int level);
    QString fixDeniedNames(const QString &str);
    QString fixTypeName(const QString &str);
    QString cammelCaseType(const QString &str);
    QString classCaseType(const QString &str);
    GeneratorTypes::QtTypeStruct translateType(const QString &type, bool addNameSpace = false, const QString &prePath = QString(), const QString &postPath = QString());
};

#endif // ABSTRACTGENERATOR_H
