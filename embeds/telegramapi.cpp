// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#include "telegramapi.h"
#include "telegram/types/types.h"
#include "telegram/functions/functions.h"
#include "telegram/coretypes.h"

#include "util/tlvalues.h"
#include "core/dcprovider.h"
#include "secret/encrypter.h"

Q_LOGGING_CATEGORY(TG_CORE_API, "tg.core.api")

#define DEBUG_FUNCTION \
    qCDebug(TG_CORE_API) << __LINE__ << __FUNCTION__;

#define CHECK_SESSION \
    if(!mMainSession) \
        return 0;

#define INIT_MAIN_CONNECTION \
    if (mMainSession->initConnectionNeeded()) { \
        p.initConnection(); \
        mMainSession->setInitConnectionNeeded(false); \
    }

using namespace Tg;

TelegramApi::TelegramApi(Session *session, Settings *settings, CryptoUtils *crypto, QObject *parent) :
    AbstractApi(session, settings, crypto, parent),
    mSettings(settings),
    mCrypto(crypto)
{
/*! === constructor === !*/
}

TelegramApi::~TelegramApi() {
}

/*! === methods === !*/

qint64 TelegramApi::uploadSaveFilePart(Session *session, qint64 fileId, qint32 filePart, const QByteArray &bytes) {
    Q_ASSERT(session);
    OutboundPkt p(mSettings);
    if (session->initConnectionNeeded()) {
        p.initConnection();
        session->setInitConnectionNeeded(false);
    }
    Functions::Upload::saveFilePart(&p, fileId, filePart, bytes);
    QVariant extra = fileId;
    return session->sendQuery(p, &uploadSaveFilePartMethods, extra);
}

qint64 TelegramApi::uploadSaveBigFilePart(Session *session, qint64 fileId, qint32 filePart, qint32 fileTotalParts, const QByteArray &bytes) {
    Q_ASSERT(session);
    OutboundPkt p(mSettings);
    if (session->initConnectionNeeded()) {
        p.initConnection();
        session->setInitConnectionNeeded(false);
    }
    Functions::Upload::saveBigFilePart(&p, fileId, filePart, fileTotalParts, bytes);
    QVariant extra = fileId;
    return session->sendQuery(p, &uploadSaveBigFilePartMethods, extra);
}

qint64 TelegramApi::uploadGetFile(Session *session, const InputFileLocation &location, qint32 offset, qint32 limit) {
    Q_ASSERT(session);
    OutboundPkt p(mSettings);
    if (session->initConnectionNeeded()) {
        p.initConnection();
        session->setInitConnectionNeeded(false);
    }
    Functions::Upload::getFile(&p, location, offset, limit);
    return session->sendQuery(p, &uploadGetFileMethods, QVariant(), __FUNCTION__ );
}
