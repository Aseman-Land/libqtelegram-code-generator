// This file generated by libqtelegram-code-generator.
// You can download it from: https://github.com/Aseman-Land/libqtelegram-code-generator
// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#ifndef TELEGRAMCORE_H
#define TELEGRAMCORE_H

#include <QObject>
#include <QPointer>
#include <functional>

#include "telegramapi.h"

class TelegramApi;
class TelegramCore : public QObject
{
    Q_OBJECT
public:
    TelegramCore(QObject *parent = 0);
    ~TelegramCore();

    class CallbackError {
    public:
        CallbackError() : errorCode(0), null(true) {}
        qint32 errorCode;
        QString errorText;
        bool null;
    };

    template<typename T>
    using Callback = std::function<void (qint64,T,CallbackError)>;

    static CallbackError apiError() {
        CallbackError error;
        error.errorCode = -1;
        error.errorText = "LIBQTELEGRAM_API_ERROR";
        error.null = false;
        return error;
    }

/*! === methods === !*/

Q_SIGNALS:
/*! === signals === !*/

protected Q_SLOTS:
/*! === events === !*/

protected:
    QPointer<TelegramApi> mApi;

    template<typename T>
    void callBackPush(qint64 msgId, Callback<T> callback) {
        if(!callback || mCallbacks.contains(msgId)) return;
        void *ptr = new Callback<T>(callback);
        mCallbacks[msgId] = ptr;
    }

    template<typename T>
    void callBackCall(qint64 msgId, const T &result, const CallbackError &error = CallbackError()) {
        void *ptr = mCallbacks.take(msgId);
        if(!ptr) return;
        Callback<T> *callBack = reinterpret_cast<Callback<T>*>(ptr);
        (*callBack)(msgId, result, error);
        delete callBack;
    }

private:
    QHash<qint64, void*> mCallbacks;

    /*! === privates === !*/
};

#endif // TELEGRAMCORE_H
